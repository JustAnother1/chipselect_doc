= Structure of database
:toc:

The database is a relative database and contains several tables. each table can have many columns. The data resides in the rows of the tables.

== Overview

The main table is the "microcontroller" table. This table has one row for each component. It maps an id to the component name. Only very simple (linear) properties of the chip are in this table.

.For each (more complex) property of a microcontroller the database has one or two tables.
* the property table lists all possible variations of this property and maps them to IDs. The name of all property tables starts with "p_"
* the property lookup table has two columns. The "dev_id" and the "property_id". The combination of "dev_id" and "property_id" is unique()Primary key). But one "dev_id" may be matched to multiple "property_id" (in multiple rows). The name of all property lookup tables start with "pl_"

== Connections between tables

In this sector the "relations" of the relative database are defined.

=== special tables
The tables in this chapter each have a special usage. They are not directly connected to a device.

==== p_user
This table has one row for each (pseudo) user and all information that defines the user. (Name, roles, password,..)

==== p_log
This table lists changes to the database. Each change to the database is documented in this table. Administrator users can then accept the change.

=== microcontroller tables
The tables in this chapter define all information that describe the chips.

Therefore we look at a single chip. and trace the data that describes that chip throughout the database.

The start for each chip is the chips data row in the *microcontroller* table.
The *id* column gives a #unique id to the device#. If several chips of the same family are in the database, that only differ in the values in the *microcontroller* table (different flash sizes,..) then the peripheral information is only available once and is linked using the id that is stored in the *svd_id* column. If the device is not part of a family then the *svd_id* is NULL.

The #architecture# of the chip defines the instructions it can understand. The *architecture_id* column specifies the architecture of the chip by referring to the *id* in the *p_architecture* table. The details of the architecture are then stored in the *p_architecture* table under that id.

The #market state# of a chip describes the availability of the chip on the market. Chips can be already obsolete(and not being sold anymore) or a future product that is not yet available. The *market_state_id* column specifies the market state of the chip by referring to the *id* in the *p_market_state* table. The *p_market_state* table then describes that state in detail.

Chips come in different housings. They can have long legs that need a hole in the PCB to stick through, they can have pins that lay flat on the surface of the PCB or the pins are just metal surfaces on the side or bottom of the chip. The *package_id* column specifies the #package# that the chip comes in by referring to the *id* in the *p_package* table. The *p_package* table then has the details of that specific package.

The #vendor# is the company that produces the chips. The *vendor_id* column specifies the vendor by referring to the *id* in the *p_vendor* table. The *p_vendor* table has the details of the vendors.

The chips also have peripherals. A peripheral is a part of the chip that has logic dedicated to a special functionality. Examples for such functionality are communication interfaces like UART, SPI and I2C or internal functions like timer, watch-dog and random number generator.

As each chip can have #multiple peripherals# a lookup table is used. The table *pl_peripheral_instance* connects a device id (*dev_id*), that is the *id* the chip has in the *microcontroller* table, to a peripheral instance id(*per_in_id*). The *per_in_id* is the id that the peripheral instance has in the *p_peripheral_instance* table. The *p_peripheral_instance* table contains the information that is specific to this instance of the peripheral. A chip can have several instances of the same peripheral. Examples are two or more UART interfaces, several timers and so on. Each peripheral instance therefore has a *peripheral_id* that defines the type of peripheral that is an instance of.

The *p_peripheral* table has one entry for each #type of peripheral#. It contains values that are specific to the peripheral. The other important function of this table is to provide the peripheral id that is then used for tables that describe stuff that a peripheral can have more than one of.

Each peripheral can have memory areas that can be used to exchange data with the peripheral. These memory areas or #address blocks# (Special Function Registers(SFR), ...) are defined in the *p_address_block* table. Each entry in that table has a unique *id* that *id* is matched to the peripheral(*peripheral_id*) by the *pl_address_block* table. The *address_offset* in the *p_address_block* table is an offset to the *base_address* value in the *p_peripheral_instance* table.

Peripherals can also have #Interrupt# signals. The Interrupt Signal are used to inform the CPU that something of interest happened in the peripheral. Examples are the change of a voltage level on a pin or the reception of a byte. The Interrupt signal is different per peripheral instance. Therefore the *pl_interrupt* table maps the peripheral instance id (*per_in_id*) to the interrupt id (*irq_id*). The *p_interrupt* table has this interrupt id as *id* and contains the details of that signal.

Peripherals also usually have #Registers# (Special Function Register (SFR)) for control and status. As there can be more than one register we again have a *pl_register* table that maps the peripheral id (*per_id*) to the register id(*reg_id*). The register id is the *id* value in the *p_register* table.The *p_register* table contains all the information regarding one register.

Registers have the size of one or more bytes. On 32bit processors most registers have 32bit (= 4 Byte). To enable or disable only a single bit is needed. Therefore it is common that control registers contains severs such switches. In other cases can only have a very limited set of settings and therefore also only need a few bits. To describe these different fields in a register the *pl_field* table maps the *reg_id* (*id* of register in *p_register* table) to the *field_id*(*id* in the *p_field* table). The *p_field* table then contains the informations regarding the field.

A field can have a limited set of very specific settings. For example different modes. This sort of data is often called an "enum" or enumeration. The *pl_enumeration* table connects the field defined by it's id (*id* in *p_field* and *field_id* in *pl_enumeration*) to the enumeration (*enum_id*). The table *p_enumeration* then defines the properties of the enumeration.

The different values that the enumeration can take are defined in the *p_enumeration_element* table. The elements/values of the enumeration are mapped to the enumeration  by the *pl_enumeration_element* table. Here again the *id* in the *p_enumeration_element* table is identical to the *value_id* in the *pl_enumeration_element* table. And the *enum_id* value in *pl_enumeration_element* is the * id* value in *p_enumeration*.

== Tables

The complete structure is available as link:db_structure.sql[mysql dump]

=== Devices

Currently we only have microcontrollers as devices. In the future we might add FPGA,...

==== microcontroller

Each row represents a micro controller chip.

.the microcontroller table
[options="header",cols="<,^,<,^,^"]
|===================================================================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the MCU | "STM32F407VGT6" | identify MCU
| CPU_clock_max_MHz | float | maximim possible clock rate of the CPU in MHz | 48.0 |
| Flash_size_kB | int | number of kB flash that is contained in the package | 32 |
| RAM_size_kB | int | number of kB RAM that is contained in the package | 32 |
| Supply_Voltage_min_V | float | minimum voltage that must be supplied for the CPU to be able to operate (in V) | 2.4 |
| Supply_Voltage_max_V | float | maximum voltage that can be supplied to the CPU to be able to operate(in V) | 5.2 |
| Operating_Temperature_min_degC | float | minimum temperature in that the CPU is able to operate (in degree Celsius) | -40.0 |
| Operating_Temperature_max_degC | float | minimum temperature in that the CPU is able to operate (in degree Celsius) | 85.0 |
| svd_id | int | id of the device that has the information for SVD file creation for this chip | 1 | reference
| Addressable_unit_bit | int | 8 means byte adressable | 8 | SVD
| bus_width_bit | int | number of bits send similtaniously on the bus | 32 | SVD
| description | text | textual description of chip | "STM32F407" | SVD
| architecture_id | int | id of architecture in p_architecture | 1 | reference
| market_state_id | int | id of market state in p_market_state | 1 | reference
| package_id | int | id of package in p_package| 1 | reference
| vendor_id | int | id of vendor in p_vendor | 1 | reference
|===================================================================================================================================

primary key is "id".


=== Architecture

The architecture of the microcontrolelr. Can be AVR, ARM. MIPS,...

==== p_architecture

Each row represents a CPU architecture.
[options="header",cols="<,^,<,^,^"]
|==============================================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the architecture | "AVR" | show name of architecture
| alternative | int | refere to an alternative name for the architecture | 1 | refernce
| svd_name | string | name used in cpu tag | CM0PLUS | <cpu><name>CM0PLUS</name></cpu>
| revision | string | revision of the core | r0p0 | cpu tag
| endian | string | endianness of the core (big, little, selectable, other) | little | cpu tag
| hasMPU | Boolean | the core has a Memory Protection Unit | true | cpu tag
| hasFPU | Boolean | the core has a Floating Point Unit | true | cpu tag
| interrupt_prio_bits | int | number of relevant bits to define Interrupt priorities | 4 | cpu tag
| ARM_Vendor_systick | Bollean | true = vendor specific systick, false = ARM defined systick | true | cpu tag
|==============================================================================================================


primary key is "id".

=== Market state

The availability of the device on the market. Can we buy it right away, is it obsolete,...

==== p_market_state

Each row represents a type of availability on the market.

[options="header",cols="<,^,<,^,^"]
|==============================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the state | "obsolete" | current state this chip has in the market.
|==============================================================================================

primary key is "id".

=== Package

The stuff around the silicon.

==== p_package

Each row represents a housing for a chip.

[options="header",cols="<,^,<,^,^"]
|==============================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the package | "LQFP" | define the enclosure that the chip comes in.
|==============================================================================================

primary key is "id".

=== Vendor

Informations regarding the company that produces the chips.

==== p_vendor

Each row represents a company that creates chips.

[options="header",cols="<,^,<,^,^"]
|======================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the vendor | "NXP" | name of company that produces the chip
| alternative | int | this is an alternative name for the vendor | 3 | reference
|======================================================================================

primary key is "id".


=== Peripheral Instance

Chips may have the same peripheral more than once. That would then be several instances of the same peripheral.

==== p_peripheral_instance

Each row represents an instance of a peripheral in a chip.

[options="header",cols="<,^,<,^,^"]
|=======================================================================================================================================================================================================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the peripheral instance | "UART1" |
| description | string | explanation what this instance is | "Universal Asynchronous Receiver Transmitter 1" |
| base_Address | Descimal(21) | lowest address of Registers for this peripheral instance | 0x400C 0400 |
| peripheral_id | int | identify the peripheral of this instance | 1 | ID
| disable_Condition | string | Define a C-language compliant logical expression returning a TRUE or FALSE result. If TRUE, refreshing the display for this peripheral is disabled and related accesses by the debugger are suppressed. | "!(DCB->DSCSR & (1 << 16))" |
|=======================================================================================================================================================================================================================================================================


primary key is "id".

==== pl_peripheral_instance
[options="header",cols="<,^,<,^,^"]
|==================================================================================================================
| name of column | data type | description | example content | intended use
| dev_id | int | identify the micro controller | 2 | foreign_id(Microcontroller)
| per_in_id | int | identify the peripheral instance available on the chip | 5 | foreign_id(p_peripheral_instance)
|==================================================================================================================


primary key is "dev_id" and "per_in_id".


=== Interrupts

Some Peripherals create interrupts.

==== p_interrupt

Each row represents an interrupt vector.

[options="header",cols="<,^,<,^,^"]
|============================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the interrupt | "UART1_TX" |
| description | string | describing of the interrupt | "UART1" |
| number | int | interrupt number | 5 |
|============================================================================

primary key is "id".

==== pl_interrupt

[options="header",cols="<,^,<,^,^"]
|=============================================================================================
| name of column | data type | description | example content | intended use
| per_in_id | int | identify the peripheral instance | 2 | foreign_id(p_peripheral_instance)
| irq_id | int | identify interrupt | 5 | foreign_id(p_interrupt)
|=============================================================================================

primary key is "per_in_id" and "irq_id".


=== Peripheral

Links the peripheral Instances to the peripheral Registers.

==== p_peripheral

Each row represents a peripheral of some chip.

[options="header",cols="<,^,<,^,^"]
|========================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| group_name | string | group similar peripherals together | "Timer" | group peripherals
|========================================================================================


primary key is "id".


=== Address Block

A defined Memory area that belongs to a peripheral.

==== p_address_block

Each row represents an address block.

[options="header",cols="<,^,<,^,^"]
|========================================================================================================================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| offset | int | offset from base address | 0x0 |
| size | int | size in number of microcontroller.Addressable_unit_bit(usually Bytes) | 0x40 |
| mem_usage | string | registers, buffer, or reserved. | 'registers' |
| protection | string | "s" - secure permission required for access, "n" - non-secure or secure permission required for access, "p" - privileged permission required for access | 'n' |
|========================================================================================================================================================================================

primary key is "id".

==== pl_address_block

[options="header",cols="<,^,<,^,^"]
|===========================================================================
| name of column | data type | description | example content | intended use
| per_id | int | identify the peripheral | 2 | foreign_id(p_peripheral)
| addr_id | int | identify address block | 5 | foreign_id(p_address_block)
|===========================================================================

primary key is "per_id" and "addr_id".


=== Register

A special Function Register. Peripherals can have Registers.

==== p_register

Each row represents an register.

[options="header",cols="<,^,<,^,^"]
|======================================================================================================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | Name of the Register | "CR" |
| display_name | string | Name of the Register | "CR" |
| description | string | explain what it is good for | "control register" |
| address_offset | int | Offset from base address of peripheral | 0x04 |
| size | int | size in bit | x020 |
| access | string | defines access rights | "read-write" |
| reset_value | Descimal(21) | value after reset | 0x80000000 |
| alternate_register | string | a different name for the same bits | "CCMR" | indicate that mapping this register to the same address is not a mistake
| reset_Mask | Descimal(21) | Identify register bits that have a defined reset value. | 0x12345678 |
| read_action | string | clear, set, modify, modifyExternal as according to SVD | "modifyExternal" | if it has a value then the debugger should not read the register
| modified_write_values | string | oneToClear, oneToSet, oneToToggle, zeroToClear, zeroToSet, zeroToToggle, clear, set, modify as according to SVD | "oneToClear" |
| data_type | string | C style definition of intended register usage | "uint32_t *" |
|======================================================================================================================================================================

primary key is "id".

==== pl_register

[options="header",cols="<,^,<,^,^"]
|============================================================================
| name of column | data type | description | example content | intended use
| per_id | int | identify the peripheral | 2 | foreign_id(p_peripheral)
| reg_id | int | identify register | 5 | foreign_id(p_register)
|============================================================================

primary key is "per_id" and "reg_id".


=== Fields

A collection of bits in a Function Register. Basically a variable of one to 32 bit in size holding some information. Registers can have one or more fields.

==== p_field

Each row represents a field.

[options="header",cols="<,^,<,^,^"]
|=====================================================================================================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | Name of the field | "ENABLE" |
| description | string | explain what it is good for | "DCMI enable" |
| bit_offset | int | Offset from start of the register | 5 |
| size_bit | int | size in bit | 4 |
| access | string | defines access rights | "read-write" |
| modified_write_values | string | oneToClear, oneToSet, oneToToggle, zeroToClear, zeroToSet, zeroToToggle, clear, set, modify as according to SVD | "oneToSet" |
| read_action | string | clear, set, modify, modifyExternal as according to SVD | “modifyExternal” | if it has a value then the debugger should not read the register
| reset_value | int | value after reset | 0x80000000 |
|=====================================================================================================================================================================

primary key is "id".

==== pl_field

[options="header",cols="<,^,<,^,^"]
|===========================================================================
| name of column | data type | description | example content | intended use
| reg_id | int | identify register | 5 | foreign_id(p_register)
| field_id | int | identify the field | 2 | foreign_id(p_field)
|===========================================================================

primary key is "field_id" and "reg_id".


=== Enumeration

A named enum as definition for a field. A field can have an enumeration.

==== p_enumeration

Each row represents a enumeration.

[options="header",cols="<,^,<,^,^"]
|============================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | Name of the enumeration | "TimerIntSelect" |
| usage_right | string | defines access rights | "read-write" |
|============================================================================

primary key is "id".

==== pl_enumeration

[options="header",cols="<,^,<,^,^"]
|============================================================================
| name of column | data type | description | example content | intended use
| field_id | int | identify the field | 2 | foreign_id(p_field)
| enum_id | int | identify the enumeration | 5 | foreign_id(p_enumeration)
|============================================================================

primary key is "field_id" and "enum_id".


==== p_enumeration_element

Each row represents a enumeration value. An enumeration can have one or more elements.

[options="header",cols="<,^,<,^,^"]
|=======================================================================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | Name of the enumeration value | "disabled" |
| description | string | definition of what this means | "The clock source clk0 is turned off." |
| value | string | value representing this element("#0x" means the first bit is 1 and the second bit don't care) | 15 |
|=======================================================================================================================

primary key is "id".

==== pl_enumeration_element

[options="header",cols="<,^,<,^,^"]
|==============================================================================================
| name of column | data type | description | example content | intended use
| enum_id | int | identify the enumeration | 2 | foreign_id(p_enumeration)
| value_id | int | identify the enumeration element | 5 | foreign_id(p_enumeration_element)
|==============================================================================================

primary key is "enum_id" and "value_id".

=== User

The users of this database. All user accounts.

==== p_user

Each row represents a user account to this database.

[options="header",cols="<,^,<,^,^"]
|============================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| name | string | name of the user | "Hans" |
| password | string | name of the user | "$2y$......." |
| full_name | string | name of the user | "Hans Dampf" |
| email | string | name of the user | "Hans@Dampf.local" |
| roles | string | name of the user | "admin, user" |
|============================================================================

primary key is "id".

=== Change log

record all changes to the database. This should help find issues with import scripts.

==== p_log
Each row represents a data change to this database.

[options="header",cols="<,^,<,^,^"]
|============================================================================
| name of column | data type | description | example content | intended use
| id | int | identify the row | 1 | ID
| action | string | Insert new entry, update entry, delete entry | "INSERT" |
| on_table | string | the database table used | "p_vendor" |
| on_id | string | the row of the table used | 45 |
| on_column | string | the column that got changed | "name" |
| old_value | string | value before change | "Atmel" |
| new_value | string | value after change | "Microchip" |
| user | string | name of the user that did the change | "Hans" |
| time_of_change | string | time the change happened | "2022-01-05 21:45:23" |
| accepted_by | string | name of the user with "admin" role that checked the change | "Uwe" |
|============================================================================

primary key is "id".

